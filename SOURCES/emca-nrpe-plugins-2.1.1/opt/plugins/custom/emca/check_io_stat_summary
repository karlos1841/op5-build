#!/usr/bin/perl

use lib "/opt/plugins";
use utils qw(%ERRORS $TIMEOUT);
use Getopt::Long;
use Data::Dumper;


my $version = "1.0";
my %opt,%message;
my %revERRORS = reverse %ERRORS;

get_options();

printf "I: %s\n", Dumper(\%opt);

sub get_options() {
	Getopt::Long::Configure("bundling");
	$result = GetOptions(
		"h"=> \$opt{'help'}, "help"=> \$opt{'help'},
		"w:f" => \$opt{'warning'}, "warning" => \$opt{'warning'},
		"c:f" => \$opt{'critical'}, "critical" => \$opt{'critical'},
		"read" => \$opt{'read'},
		"write" => \$opt{'write'},
		"tps" => \$opt{'tps'},
		"await" => \$opt{'await'},
		"avgqu-sz" => \$opt{'avgqu-sz'}
		);

	if(!$result) {
		exit $ERRORS{'UNKNOWN'};
	}
	
	if(defined($opt{'help'})) {
		print_help();
		exit $ERRORS{'OK'};
	}

	if(defined($opt{'warning'}) && defined($opt{'critical'})) {
		if($opt{'warning'} >= $opt{'critical'}) {
			print "Critical must be greater then warning\n";
			exit $ERRORS{'UNKNOWN'}; 
		}
	} else {
		print "Please specify thresholds\n";
		exit $ERRORS{'CRITICAL'};
	}
}

if(defined($opt{'read'})) {
	$command = "iostat -d ALL | sed '/^\$/d' | tail -n +3 | awk '{ SUM += \$3 } END { print SUM }'";
	#printf "II COmmands: %s\n", $command;
	$_ = `$command`;
	if($?) {
		print "BLAD\n";
		exit $ERRORS{'UNKNOWN'};
	}

	$result = $_;
	chomp($result);
	#printf "II: %s\n", $result;

	if($result >= $opt{'critical'}) {
		$message{'message'} = sprintf "Read (Kb/s) %s: read=%.2f|read=%.2f;%s;%s", $revERRORS{$ERRORS{'CRITICAL'}}, $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'CRITICAL'};
	}
	elsif($result >= $opt{'warning'}) {
		$message{'message'} = sprintf "Read (Kb/s) %s: read=%.2f|read=%.2f;%s;%s", $revERRORS{$ERRORS{'WARNING'}}, $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'WARNING'};
	}else {
		$message{'message'} = sprintf "Read (Kb/s) %s: read=%.2f|read=%.2f;%s;%s", $revERRORS{$ERRORS{'OK'}}, $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'OK'};
	}
}

if(defined($opt{'write'})) {
	$command = "iostat -d ALL | sed '/^\$/d' | tail -n +3 | awk '{ SUM += \$4 } END { print SUM }'";
	#printf "III: Command: %s\n", $command;
	$_ = `$command`;
	if($?) { 
		print "BLAD\n";
		exit $ERRORS{'UNKNOWN'};
	}

	$result = $_;
	chomp($result);
	#printf "III: %s\n", $result;

	if($result >= $opt{'critical'}) {
		$message{'message'} = sprintf "Write (Kb/s) CRITICAL: write=%.2f|write=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'CRITICAL'};
	} elsif($result >= $opt{'warning'}) {
		$message{'message'} = sprintf "Write (Kb/s) WARNING: write=%.2f|write=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'WARNING'};
	} else {
		$message{'message'} = sprintf "Write (Kb/s) OK: write=%.2f|write=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'};
	}	
}

if(defined($opt{'tps'})) {
	$command = "iostat -d ALL | sed '/^\$/d' | tail -n +3 | awk '{ SUM += \$2 } END { print SUM }'";
	#print "IV: %s\n", $command;
	$_ = `$command`;
	if($?) {
		print "BLAD\n";
		exit $ERRORS{'UNKNOWN'};
	}
	
	$result = $_;
	chomp($result);
	#printf "IV: %s\n", $result;

	if($result >= $opt{'critical'}) {
		$message{'message'} = sprintf "Transactions (operations/s) CRITICAL: tps=%.2f|tps=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'CRITICAL'};
	} elsif($result >= $opt{'warning'}) {
		$message{'message'} = sprintf "Transactions (operations/s) WARNING: tps=%.2f|tps=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'WARNING'};
	} else {
		$message{'message'} = sprintf "Transactions (operations/s) OK: tps=%.2f|tps=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'OK'};
	}
}

if(defined($opt{'await'})) {
	$command = "iostat -x | sed '/^\$/d' | tail -n +3 | awk '{ SUM+=\$10 } END { print SUM }'";
	#print "V: %s\n", $command;
	$_ = `$command`;
	if($?) {
		print "BLAD\n";
		exit $ERRORS{'UNKNOWN'};
	}
	$result = $_;
	chomp($result);
	
	if($result >= $opt{'critical'}) {
		$message{'message'} = sprintf "The average time (in milliseconds) for I/O requests CRITICAL: await=%.2f|await=%.2f;%s;%s", $result, $result, 
																$opt{'warning'}, $opt{'critical'};
		$message{'status'} = $$ERRORS{'CRITICAL'};
	}elsif($result >=$opt{'warning'}) {
		$message{'message'} = sprintf "The average time (in milliseconds) for I/O requests WARNING: await=%.2f|await=%.2f;%s;%s", $result, $result,
																$opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'WARNING'};
	} else {
		$message{'message'} = sprintf "The average time (in milliseconds) for I/O requests OK: await=%.2f|await=%.2f;%s;%s", $result, $result,
																$opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'OK'};
	}
}

if(defined($opt{'avgqu-sz'})) {
	$command = "iostat -x | sed '/^\$/d' | tail -n +3 | awk '{ SUM+=\$9 } END { print SUM }'";
	#print "VI: %s\n", $command;
	$_ = `$command`;
	if($?) {
		print "BLAD\n";
		exit $ERRORS{'UNKNOWN'};
	}
	$result = $_;
	chomp($result);

	if($result >= $opt{'critical'}) {
		$message{'message'} = sprintf "The average queue length of the requests CRITICAL: avgqu-sz=%.2f|avgqu-sz=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'CRITICAL'};
	} elsif($result >= $opt{'warning'}) {
		$message{'message'} = sprintf "The average queue length of the requests WARNING: avgqu-sz=%.2f|avgqu-sz=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'WARNING'};
	} else {
		$message{'message'} = sprintf "The average queue length of the requests OK: avgqu-sz=%.2f|avgqu-sz=%.2f;%s;%s", $result, $result, $opt{'warning'}, $opt{'critical'};
		$message{'status'} = $ERRORS{'OK'};
	}
}

print $message{'message'};
exit $message{'status'};

sub print_help(){
        print " This is a check for disk io operations. The plugin delivers Read(Kb/s), Write(Kb/s), Transactions (operations/s), Average time read/write, Average queue length  information about all disks.\n";
        print " Big change is to monitor all partitions without modification of host nrpe config file. On host side we use a command: \n";
        print " command[avg_read_io]=/opt/plugins/custom/emca/check_io_stat_summary --read -w <ARG1> -c <ARG2> \n";
        print " command[avg_write_io]=/opt/plugins/custom/emca/check_io_stat_summary --write -w <ARG1> -c <ARG2> \n";
        print " command[avg_tps_io]=/opt/plugins/custom/emca/check_io_stat_summary --tps -d -w <ARG1> -c <ARG2> \n";
        print " command[avg_await_io]=/opt/plugins/custom/emca/check_io_stat_summary --await -w <ARG1> -c <ARG2> \n";
        print " command[avg_avgqusz_io]=/opt/plugins/custom/emca/check_io_stat_summary --avgqu-sz -w <ARG1> -c <ARG2> \n";
        print " check_io_stat is a normal plugin from distro and works on Linux.\n";
        print " \n";
        print " Producer EM&CA S.A. http://it.emca.pl ver 1.0\n";
        print " Do not use without agreement. \n";
        print " \n";

        print " $PROGNAME [-h | --help]\n";
        print " $PROGNAME [--read|--write|--tps|--await|-avgqu-sz|--help] -w <warining> -c <critical>  \n";
        print "\tWhere: \n";
        print "\t\t--read Reads (Kb/s)\n";
        print "\t\t--write Writes (Kb/s)\n";
        print "\t\t--tps Transactions ( operations/s)\n";
        print "\t\t--await Average time read/write\n";
        print "\t\t--avgqu-sz Average queue length\n"; 
        print "\t\t-w <warning> is the warning treshold that the found value is compared to. \n";
        print "\t\t-c <critical> is the critical treshold that the found value is compared to. \n";
        print "\n";

}
