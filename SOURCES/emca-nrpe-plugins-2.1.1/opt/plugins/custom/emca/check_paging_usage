#!/bin/bash
#set -x

while [ $# -gt 0 ]; do
	case $1 in
		--pgfault) 
			opt=1
			COMMAND="Memory Page Fault/s"
		;;
		--paging) 
			opt=2
			COMMAND="Memory Paging In/s Out/s"
		;;
		-w) warning1=$2;;
		-w2) warning2=$2;;
		-c) critical1=$2;;
		-c2) critical2=$2;;
	esac
	shift
done

osName=`uname`

if [ $osName == "Linux" ]; then
	result=`sar -B 1 3|tail -1`
	
	#paged_in=`vmstat -s|grep "paged in"|tr -d [:alpha:]|tr -d ['space']`
	#paged_out=`vmstat -s|grep "paged out"|tr -d [:alpha:]|tr -d ['space']`
	#pgfault=`cat /proc/vmstat|grep pgfault|awk '{ print $2 }'`
	#pgmajfault=`cat /proc/vmstat|grep pgmajfault|awk '{ print $2}'`
	paged_in=`echo $result| awk '{ print $2 }'`
	paged_out=`echo $result | awk '{ print $3 }'`
	pgfault=`echo $result | awk '{ print $4 }'`
	pgmajfault=`echo $result | awk '{ print $5 }'`

elif [ $osName == "SunOS" ]; then

	# minor faults
	mf=`vmstat 1 3|tail -1|awk '{ print $7 }'`
	# paged in
	pi=`vmstat 1 3|tail -1|awk '{print $8 }'`
	# paged out
	po=`vmstat 1 3|tail -1|awk '{print $9 }'`

fi

#echo "paged_in=$paged_in paged_out=$paged_out pgfault=$pgfault pgmajfault=$pgmajfalut"
function return() {

	if [[ $osName == "SunOS" ]] && [[ "$4" == "mf" ]]; then
		if [ $5 -ge $2 ]; then
			echo "$3: CRITICAL: $4=$5|$4=$5;$1;$2"
			exit 2
		elif [ $5 -ge $1 ]; then
			echo "$3: WARNING: $4=$5|$4=$5;$1;$2"
			exit 1
		else
			echo "$3: OK: $4=$5|$4=$5;$1;$2"
			exit 0
		fi
	else
		#echo "$1 $2 $3 $4 $5 $6 $7 $8 $9"

		#if [[ $8 -ge $3 ]] || [[ $9 -ge $4 ]]; then
		if [[ `echo "$8>=$3"|bc` -eq 1 ]] || [[ `echo "$9>=$4"|bc` -eq 1 ]]; then
			echo "$5: CRITICAL: $6=$8 $7=$9|$6=$8;$1;$3 $7=$9;$2;$4"
			exit 2
		#elif [[ $8 -ge $1 ]] || [[ $9 -ge $2 ]]; then
		elif [[ `echo "$8>=$1"|bc` -eq 1 ]] || [[ `echo "$9>=$2"|bc` -eq 1 ]]; then
			echo "$5: WARNING: $6=$8 $7=$9|$6=$8;$1;$3 $7=$9;$2;$4"
			exit 1
		else
			echo "$5: OK: $6=$8 $7=$9|$6=$8;$1;$3 $7=$9;$2;$4"
			exit 0
		fi
	fi
}

case $opt in 
	2) # return pgfault
		if [ $osName == "Linux" ]; then
			return $warning1 $warning2 $critical1 $critical2 "$COMMAND" "pgpgin" "pgpgout" $paged_in $paged_out
		elif [ $osName == 'SunOS' ]; then
			return $warning1 $warning2 $critical1 $critical2 "$COMMAND" "pi" "po" $pi $po
		fi
	;;
	1) # return pgmajfault
		if [ $osName == "Linux" ]; then
			return $warning1 $warning2 $critical1 $critical2 "$COMMAND" "fault" "majflt" $pgfault $pgmajfault
		elif [ $osName == "SunOS" ]; then
			return $warning1 $critical1 "$COMMAND" "mf" $mf
		fi
	;;
esac
	
